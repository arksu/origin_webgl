apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: "org.jmailen.kotlinter"

sourceCompatibility = 1.8
targetCompatibility = 1.8

idea {
    module {
        excludeDirs += file('out')
    }
}

sourceSets {
    main {
        java.srcDir 'src'
        resources.srcDir 'res'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.useIR = true
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    jcenter()
    mavenCentral()
}

buildscript {
    ext {
        kotlin_version = '1.5.31'
        ktor_version = '1.6.3'
        exposed_version = '0.35.1'
        slf4j_version = '1.7.30'
    }

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20"
        classpath "org.jmailen.gradle:kotlinter-gradle:3.4.5"
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-cio:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-websockets:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"

    implementation "org.jetbrains.exposed:exposed-core:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jdbc:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-dao:$exposed_version"
    implementation "org.jetbrains.exposed:exposed-jodatime:$exposed_version"

    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation "org.slf4j:slf4j-log4j12:$slf4j_version"

    implementation "com.google.code.gson:gson:2.8.6"

    implementation "com.zaxxer:HikariCP:3.4.5"
    implementation "org.mariadb.jdbc:mariadb-java-client:2.7.1"
    implementation "com.typesafe:config:1.4.1"
}

application {
    mainClass = 'com.origin.Launcher'
}

task mapgen(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.origin.utils.MapGenerator'
}
task mapimport(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.origin.utils.MapImporter'
}

distributions {
    main {
        contents {
            from 'etc/run.sh'
            from 'etc/stop.sh'
        }
    }
}

jar {
    manifest {
        def manifestClasspath =
                configurations.compileClasspath.collect { it.name }.join(' ')

        attributes 'Implementation-Title': 'origin',
                'Main-Class': 'com.origin.Launcher',
                'Class-Path': manifestClasspath
    }
}

kotlinter {
    ignoreFailures = false
    indentSize = 4
    reporters = ['checkstyle', 'plain']
    experimentalRules = false
    disabledRules = ["no-wildcard-imports"]
}